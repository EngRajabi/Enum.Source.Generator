<Project>
    <PropertyGroup>
        <LangVersion>10.0</LangVersion>
        <AnalysisLevel>latest</AnalysisLevel>
        <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
        <RunAnalyzersDuringBuild>true</RunAnalyzersDuringBuild>
        <RunAnalyzersDuringLiveAnalysis>true</RunAnalyzersDuringLiveAnalysis>
        <EnforceCodeStyleInBuild>true</EnforceCodeStyleInBuild>
        <CodeAnalysisTreatWarningsAsErrors>true</CodeAnalysisTreatWarningsAsErrors>

        <!--
      CA2007: Consider calling ConfigureAwait on the awaited task
      MA0004: Use Task.ConfigureAwait(false) as the current SynchronizationContext is not needed
      CA1056: Change the type of property 'Url' from 'string' to 'System.Uri'
      CA1054: Change the type of parameter of the method to allow a Uri to be passed as a 'System.Uri' object
      CA1055: Change the return type of method from 'string' to 'System.Uri'
    -->
        <NoWarn>$(NoWarn);SCS0004;CA1716;CA2227;CA1002;MA0025;MA0051;MA0002;CS7022;CS8803;</NoWarn>
        <NoError>$(NoError);SCS0004;CA1716;CA2227;CA1002;MA0025;MA0051;MA0002;CS7022;CS8803;</NoError>
        <ReportAnalyzer>true</ReportAnalyzer>
        <AnalysisMode>Default</AnalysisMode>
        <EnableNETAnalyzers>true</EnableNETAnalyzers>

        <Company>Mohsen Rajabi</Company>
        <Copyright>MohsenRajabi@2022</Copyright>
        <Authors>Mohsen Rajabi</Authors>


        <Description>
            A C# source generator to create an enumeration class from an enum type.
            With this package, you can work on enums very, very fast without using reflection.
        </Description>
        <PackageTags>
            enums enum codegenerator codegeneration code-generator sourcegenerator source-generator sourcegenerators source-generators
            codegenerators code-generators fastenum fast-enum codegen generator generators reflection enum-generator enumgenerator
            enumfast enum-fast csharp-sourcegenerator
        </PackageTags>

        <PackageLicenseExpression>MIT</PackageLicenseExpression>
        <PackageProjectUrl>https://github.com/EngRajabi/Enum.Source.Generator</PackageProjectUrl>
        <RepositoryUrl>https://github.com/EngRajabi/Enum.Source.Generator</RepositoryUrl>
        <RepositoryType>git</RepositoryType>

        <!--<PackageIcon>Aspcore-Dapper-Extensions.png</PackageIcon>-->

        <!-- Publish the repository URL in the built .nupkg (in the NuSpec <Repository> element) -->
        <PublishRepositoryUrl>true</PublishRepositoryUrl>
        <!-- Embed source files that are not tracked by the source control manager in the PDB -->
        <EmbedUntrackedSources>true</EmbedUntrackedSources>
        <!-- Recommended: Embed symbols containing Source Link in the main file (exe/dll) -->
    </PropertyGroup>


    <PropertyGroup Condition="'$(GITHUB_ACTIONS)' == 'true'">
        <ContinuousIntegrationBuild>true</ContinuousIntegrationBuild>
    </PropertyGroup>
    <ItemGroup>
        <PackageReference Include="Microsoft.CodeAnalysis.NetAnalyzers" Version="7.0.1">
            <PrivateAssets>all</PrivateAssets>
            <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
        </PackageReference>

        <PackageReference Include="Microsoft.CodeAnalysis.Analyzers" Version="3.3.3">
            <PrivateAssets>all</PrivateAssets>
            <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
        </PackageReference>

        <PackageReference Include="Microsoft.SourceLink.GitHub" Version="1.1.1" PrivateAssets="All" />
    </ItemGroup>

    <ItemGroup>
        <AdditionalFiles Include="$(MSBuildThisFileDirectory)BannedSymbols.txt" Link="Properties/BannedSymbols.txt" />
        <Compile Include="$(MSBuildThisFileDirectory)/AssemblyInfo.cs" Link="Properties/AssemblyInfo.common.cs" />
    </ItemGroup>
</Project>
